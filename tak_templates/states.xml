<?xml version="1.0" encoding="UTF-8"?>
<state id="{ID}" name="{TAK_NAME}" concept-type="state">
  <categories/>
  <standard-terms/>
  <synonyms/>
  <temporal-semantic downward-hereditary="{TEMPORAL_downward-hereditary}" forward="{TEMPORAL_forward}" backward="{TEMPORAL_backward}" solid="{TEMPORAL_solid}" concatenable="{TEMPORAL_concatenable}" gestalt="{TEMPORAL_gestalt}"/>  
  <clippers/>
  <derived-from>
    <derived-from-id>{DERIVED_FROM}</derived-from-id>
  </derived-from>
  <abstraction-at-contexts/>

  <mapping-function rank-selection-criteria="{Mapping_Rank_Selection_Criteria}">
    <mapping-functions-to-values>
      <!-- ordinal bin ranges are under column MAPPING, and their matched label under STATE_LABELS -->
      <!-- values are matched like MAPPING[idx] -> STATE_LABELS[idx] -->
      <!-- 
      Mapping operator rules (MUST use: lower_bound <= x < upper_bound):

      ✔ Use this format for **all bins**, including the first and last:
        → Always write ranges as: threshold1 <= x < threshold2
        → Do NOT use <, <=, >=, > alone
        → Avoid "x < threshold" and "x >= threshold" forms

      ✔ Implement with a logical-function (AND of two comparisons):
        <comparison-function comparison-operator="bigger-equal">
          <concept-id-allowed-values id="..."/>
          <double>{lower_bound}</double>
        </comparison-function>
        <comparison-function comparison-operator="smaller">
          <concept-id-allowed-values id="..."/>
          <double>{upper_bound}</double>
        </comparison-function>

      ✔ Each bin must have:
        - Both lower and upper bounds
        - Unique, non-overlapping, and continuous ranges
        - Corresponding label from STATE_LABELS at same index

      ✔ Ranges appear like [min_val, max_val] in Excel.
      -->

      <!-- Example: RANGE THRESHOLD1 <= x < THRESHOLD2 -->
      <!-- Can be done using a logical-operator -->
      <mapping-function-2-value order="0" value="{STATE_LABELS[1]}">
        <evaluation-tree data-type="logical-function">
          <logical-function logical-operator="and">
            <operands>
              <operand data-type="comparison-function">
                <comparison-function comparison-operator="bigger-equal">
                  <left data-type="concept-id-allowed-values">
                    <concept-id-allowed-values id="{DERIVED_FROM}"/>
                  </left>
                  <right data-type="double">
                    <double>{THRESHOLD1}</double>
                  </right>
                </comparison-function>
              </operand>
              <operand data-type="comparison-function">
                <comparison-function comparison-operator="smaller">
                  <left data-type="concept-id-allowed-values">
                    <concept-id-allowed-values id="{DERIVED_FROM}"/>
                  </left>
                  <right data-type="double">
                    <double>{THRESHOLD2}</double>
                  </right>
                </comparison-function>
              </operand>
            </operands>
          </logical-function>
        </evaluation-tree>
      </mapping-function-2-value>
      <!-- Add as many blocks like this as needed (exactly len(MAPPING) blocks) -->
      <!-- Be sure to increment the order, match the value (STATE_LABELS[idx]) -->
    <mapping-functions-to-values>
  </mapping-function>
  <ordinal-allowed-values output-type="ordinal">
    <persistence>
      <global-persistence granularity="second" behavior="pos-pos">
        <interpolation-table>
          <rows/>
        </interpolation-table>
      </global-persistence>
      <local-persistence>
        <good-before value="{LOCAL_PERSISTENCE_GOOD_BEFORE_VALUE}" granularity="{LOCAL_PERSISTENCE_GOOD_BEFORE_GRANULARITY}"/>
        <good-after value="{LOCAL_PERSISTENCE_GOOD_AFTER_VALUE}" granularity="{LOCAL_PERSISTENCE_GOOD_AFTER_GRANULARITY}"/>
      </local-persistence>
    </persistence>
    <values>
      <ordinal-allowed-value order="0" value="{STATE_LABELS[0]}"/>
      <!-- Add more ordinal values as needed, based on number of states you defined -->
    </values>
  </ordinal-allowed-values>
</state>